#pragma once
#include "utils.h"

// (S)istema (I)nternacional de unidades:
namespace elect {

	static void SI() {
		using namespace std;
		setlocale(LC_ALL, "Portuguese"); //habilita a acentuação para o português

		utils::PrintColour_("(S)istema Métrico (I)nternacional de Unidade (SI-Sistème Internacionale):", BRI);
		utils::PrintColour_("_______________________________________________________________", FGI);
		cout << "| Grandeza....................| Unidade Fundamental.| Símbolo.| \n";
		cout << "|_____________________________|_____________________|_________| \n";
		cout << "| Comprimento.................| metro...............| m.......| \n";
		cout << "| Massa.......................| quilograma..........| kg......| \n";
		cout << "| Tempo.......................| segundo.............| s.......| \n";
		cout << "| Corrente Elétrica...........| ampère..............| A.......| \n";
		cout << "| Temperatura Termodinâmica...| kelvin..............| K.......| \n";
		cout << "| Intensidade Luminosa........| candela.............| cd......| \n";
		cout << "| Quantidade de Matéria.......| mole................| mol.....| \n";
		cout << "|_____________________________________________________________| \n";
	}

	static void derivadasDoSI() {
		using namespace std;
		utils::PrintColour_("Unidades Derivadas do S.I.:", BRI);
		utils::PrintColour_("____________________________________________________", FGI);
		cout << "| Grandeza.....................| Unidade..| Símbolo|\n";
		cout << "|______________________________|__________|________|\n";
		cout << "| Energia......................| Joule....| J......|\n";
		cout << "| Força........................| Newton...| N......|\n";
		cout << "| Potência.....................| Watt.....| W......|\n";
		cout << "| Carga elétrica...............| Coulomb..| C......|\n";
		cout << "| Potencial elétrico...........| Volt.....| V......|\n";
		cout << "| Resistência elétrica.........| Ohm......| ?......|\n";
		cout << "| Condutância elétrica.........| Siemens..| S......|\n";
		cout << "| Capacitância elétrica........| Farad....| F......|\n";	
		cout << "| Indutância elétrica..........| Henry....| H......|\n";
		cout << "| Frequência...................| Hertz....| Hz.....|\n";
		cout << "| Fluxo Magnético..............| Weber....| Wb.....|\n";
		cout << "| Densidade de Fluxo Magnético.| Tesla....| T......|\n";
		cout << "|__________________________________________________|\n";
	}
	static void multiTable() {
		using namespace std;
		utils::PrintColour_("<<_Tabela de Multiplicadores_>>\n\n", BRI);
		utils::PrintColour_("________________________________________________________________________________________________", FGI);
		cout << "| Prefix |Simbol| Power    | Decimal                          |                                 |\n";
		cout << "|________|______|__________|__________________________________|_________________________________|\n";
		cout << "| YOCTO  | y    | 10^-24   | 0,000 000 000 000 000 000 000 001| Septillionth  / Septilionésimo  |\n";
		cout << "|________|______|__________|__________________________________|_________________________________|\n";
		cout << "| ZEPTO  | z    | 10^-21   | 0,000 000 000 000 000 000 001    | Sextillionth  / Sextilionésimo  |\n";
		cout << "|________|______|__________|__________________________________|_________________________________|\n";
		cout << "| ATTO   | a    | 10^-18   | 0,000 000 000 000 000 001        | Quintillionth / Quintilionésimo |\n";
		cout << "|________|______|__________|__________________________________|_________________________________|\n";
		cout << "| FEMTO  | f    | 10^-15   | 0,000 000 000 000 001            | Quadrillionth / Quadrilionésimo |\n";
		cout << "|________|______|__________|__________________________________|_________________________________|\n";
		cout << "| PICO   | p    | 10^-12   | 0,000 000 000 001                | Trillionth    / Trilionésimo    |\n";
		cout << "|________|______|__________|__________________________________|_________________________________|\n";
		cout << "| NANO   | n    | 10^-9    | 0,000 000 001                    | Billionth     / Bilionésimo     |\n";
		cout << "|________|______|__________|__________________________________|_________________________________|\n";
		cout << "| MICRO  | m    | 10^-6    | 0,000 001                        | Millionth     / Milionésimo     |\n";
		cout << "|________|______|__________|__________________________________|_________________________________|\n";
		cout << "| MILLI  | m    | 10^-3    | 0,001                            | Thousandth    / Milésimo        |\n";
		cout << "|________|______|__________|__________________________________|_________________________________|\n";
		cout << "| CENTI  | c    | 10^-2    | 0,01                             | Hundredth     / Centésimo       |\n";
		cout << "|________|______|__________|__________________________________|_________________________________|\n";
		cout << "| DECI   | d    | 10^-1    | 0,1                              | Tenth         / Décimo          |\n";
		cout << "|________|______|__________|__________________________________|_________________________________|\n";
		cout << "| UM     | -    | 10^0     | 1                                | One           / Um              |\n";
		cout << "|________|______|__________|__________________________________|_________________________________|\n";
		cout << "| DECA   | da   | 10^1     | 10                               | Ten           / Dez             |\n";
		cout << "|________|______|__________|__________________________________|_________________________________|\n";
		cout << "| HECTO  | h    | 10^2     | 100                              | Hundred       / Cem             |\n";
		cout << "|________|______|__________|__________________________________|_________________________________|\n";
		cout << "| QUILO  | k    | 10^3     | 1000                             | Thounsand     / Mil             |\n";
		cout << "|________|______|__________|__________________________________|_________________________________|\n";
		cout << "| MEGA   | M    | 10^6     | 1000 000                         | Million       / Milhão          |\n";
		cout << "|________|______|__________|__________________________________|_________________________________|\n";
		cout << "| GIGA   | G    | 10^9     | 1000 000 000                     | Billion       / Bilhão          |\n";
		cout << "|________|______|__________|__________________________________|_________________________________|\n";
		cout << "| TERA   | T    | 10^12    | 1000 000 000 000                 | Trillion      / Trilhão         |\n";
		cout << "|________|______|__________|__________________________________|_________________________________|\n";
		cout << "| PETA   | P    | 10^15    | 1000 000 000 000 000             | Quadrillion   / Quatrilhão      |\n";
		cout << "|________|______|__________|__________________________________|_________________________________|\n";
		cout << "| EXA    | E    | 10^18    | 1000 000 000 000 000 000         | Quintillion   / Quintilhão      |\n";
		cout << "|________|______|__________|__________________________________|_________________________________|\n";
		cout << "| ZETA   | Z    | 10^21    | 1000 000 000 000 000 000 000     | Sextillion    / Sextilhão       |\n";
		cout << "|________|______|__________|__________________________________|_________________________________|\n";
		cout << "| YOTA   | Y    | 10^24    | 1000 000 000 000 000 000 000 000 | Septillion    / Setilhão        |\n";
		cout << "|________|______|__________|__________________________________|_________________________________|\n";
	};

	void _testIndexes();

} // elect















